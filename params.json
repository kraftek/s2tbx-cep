{
  "name": "S2tbx-cep",
  "tagline": "",
  "body": "# Sentinel-2 Toolbox Cloud Executor\r\n\r\nThis is a simple demonstrator of the cloud execution capabilities of the ESA Sentinel-2 Toolbox.\r\nThe following picture illustrates the execution topology and flow:\r\n\r\n\r\n# Prerequisites - how to configure the virtual machines\r\nAlthough the demonstrator can run on Windows machines also, below are presented the steps necessary to configure Linux machines.\r\n\r\n## Step 1: Create virtual machines\r\nCreate 3 virtual machines with CentOS 7.\r\n## Step 2: Install Java\r\nDownload the latest JRE from Oracle.\r\nIn a terminal window, go to the location where the rpm was downloaded and execute:\r\n\r\n    sudo yum localinstall jre-8u92-linux-x64.rpm\r\n    rm jre-8u92-linux-x64.rpm\r\n    sudo alternatives --config java\r\n\r\nChoose the appropriate java version:\r\n\r\n    sudo sh -c \"echo export JAVA_HOME=/usr/java/jre1.8.0_92 >> /etc/environment\"\r\n\r\n## Step 3: Install SNAP\r\nDownload the latest version from [http://step.esa.int](http://step.esa.int).\r\nChange the permission of the downloaded file to be executable.\r\nExecute the file using the -c option (in order to install SNAP from command line).\r\nFollow the on-screen instructions.\r\n\r\n## Step 4: Create the master shared folder\r\nOn the \"master\" machine open a terminal and do the following:\r\n\r\n    yum -y install samba samba-client\r\n    mkdir /mnt/share\r\n    chmod 777 /mnt/share\r\n    vi /etc/samba/smb.conf\r\n\r\nNear line 66: add the following:\r\n\r\n    unix charset = UTF-8\r\n    dos charset = CP932\r\n\r\nNear line 90: change (Windows' default):\r\n\r\n    workgroup = WORKGROUP\r\n\r\nNear line 96: uncomment and change IP addresses you want to allow.\r\n\r\n    hosts allow = 127. 10.0.0.\r\n\r\nIn the above, the IPs from 127.*.*.* and 10.0.0.* are allowed.\r\nNear line 126: add ( no auth ):\r\n\r\n    security = user\r\n    passdb backend = tdbsam\r\n    map to guest = Bad User\r\n\r\nAppend the followint to the end of the file:\r\n\r\n    [share]\r\n      path = /mnt/share\r\n      writable = yes\r\n      guest ok = yes\r\n      guest only = yes\r\n      create mode = 0777\r\n      directory mode = 0777\r\n      share modes = yes\r\n\r\nSave and close the file, and then restart (and enable) the smb and nmb services:\r\n\r\n    systemctl start smb nmb\r\n    systemctl enable smb nmb\r\n\r\n## Step 5: Configure SELinux on the master node\r\nOn the master node, run the following in a terminal window:\r\n    chcon -Rt samba_share_t /mnt/share\r\nReboot the machine:\r\n    reboot\r\n\r\n## Step 6: Mount the master shared folder on the slave machines\r\nOn each of the \"slave\" machines mount the shared folder:\r\n\r\n    mkdir /home/share\r\n    chmod 777 /home/share\r\n    sudo mount.cifs \\\\\\\\<master>\\\\share /home/share -o user=admin password=abc123.\r\n\r\nTo persist the shared folder, edit (sudo) the /etc/fstab file and add the following line:\r\n\r\n    //<master>/share                      /home/share            cifs    user=admin,password=abc123.,file_mode=0777,dir_mode=0777,noperm       0  0\r\n\r\n## Step 7: Configure SSHD on slave machines\r\nStart the SSH daemon service:\r\n\r\n    sudo systemctl start sshd\r\n    sudo systemctl enable sshd\r\n    exit\r\n    ssh-keygen\r\n    ssh-copy-id -i ~/.ssh/id_rsa.pub admin@<master>\r\n\r\n# How to run the executor\r\nThe supported arguments of the executable jar are the following:\r\n\r\n      -ms,--mastershare\r\n    The shared folder residing on the master node that is visible to all slave nodes.\r\n\r\n      -smf,--slavemountfolder\r\n    The folder, local to slave nodes, where the master shared folder is mount.\r\n\r\n      -u,--user\r\n    The user name used to connect to remote slave nodes.\r\n  \r\n      -p,--password\r\n    The password of the user used to connect to remote slave nodes.\r\n\r\n      -in,--input\r\n    The folder, relative to the common shared folder, from which the S2 products are to be processed.\r\n\r\n      -out,--output\r\n    The folder, relative to the master shared folder, to which the processed products will be written to.\r\n\r\n      -sop,--slaveOp\r\n    The name of the SNAP operator to be executed on each of the slave nodes.\r\n  \r\n      -sargs,--slaveOpArgs\r\n    Parameters of the SNAP operator to be executed on each of the slave nodes.\r\n\r\n      -mop,--masterOp\r\n    The name of the SNAP operator to be executed on the master node.\r\n\r\n      -margs,--masterOpArgs\r\n    Parameters of the SNAP operator to be executed on the master node.\r\n  \r\n      -w,--wait\r\n    How long (in minutes) the master node should wait for a slave node to complete its execution.\r\n\r\nAn example of using this command line tool:\r\n\r\n    java -jar s2tbx-cep-1.0.jar -ms \\\\masternode\\share -smf /mnt/share -u <user> -p <password> -in products -out . -w 10 \r\n                                -sop NdviOp \r\n                                -sargs \"-PnirFactor=1.0F -PnirSourceBand=B3 -PredFactor=1.0F -PredSourceBand=B4\" \r\n                                -mop Mosaic \r\n                                -margs \"-Pcombine=OR -Pcrs=EPSG:32634 -PeastBound=22.30 -PnorthBound=44.55 -PwestBound=24.45 -PsouthBound=43.45 -PpixelSizeX=0.001 -PpixelSizeY=0.001 -Presampling=Nearest -Porthorectify=false\"\r\n\r\nThis example is just to illustrate the invocation syntax. For the Mosaic operator to work, an XML descriptor should be provided to it instead of the command line parameters.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}